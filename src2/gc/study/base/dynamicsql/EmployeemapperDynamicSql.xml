<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="gc.study.base.dynamicsql.dao.EmployeemapperDynamicSql">
	<select id="getEmpsByConditionIf" resultType="d_e">
		select id,last_name lastName,gender,email from tbl_employee
		<!-- 查询的时候可能如果某些条件没带导致sql拼装有问题
			给where 加上 1=1
			使用where标签来将所有的查询语句包括在内，其会将多余前面的and/or自动去掉
			trim标签可以控制条件表达式的前缀、后缀。去除首尾多余的and/or的条件 -->
		<where>
			<!-- test:判断表达式（OGNL）
				if test 判断条件是否成立，从参数中进行取值 -->
			<if test="id!=null">
				id=#{id}
			</if>
			<if test="lastName!=null and lastName!=''">
				and last_name like #{lastName}
			</if>
			<if test="email!=null and email.trim()!=''">
				and email=#{email}
			</if>
			<!-- ognl会进行字符串与数值的转换比较 -->
			<if test="gender==0 or gender==1">
				 and gender=#{gender}
			</if>
		</where>
	</select>
	
	<!-- choose（when otherwise）：分支选择，类似switch-case -->
	<select id="getEmpsByConditionChoose" resultType="d_e">
		select id,last_name lastName,gender,email from tbl_employee
		<where>
			<choose>
				<when test="id!=null">
					id=#{id}
				</when>
				<when test="lastName!=null">
					last_name like #{lastName}
				</when>
				<when test="email!=null">
					email = #{email}
				</when>
				<otherwise>
					1=1
				</otherwise>
			</choose>
		</where>
	</select>
	
	<!-- set -->
	
	<update id="updateEmp">
		update tbl_employee 
  		<set>
	  		<if test="lastName!=null">
	  			last_name=#{lastName},
	  		</if>
	  		<if test="email!=null">
	  			email=#{email},
	  		</if>
	  		<if test="gender!=null">
	  			gender=#{gender}
	  		</if>
  		</set>
  		where id=#{id}
	</update>
	<!-- 使用foreach遍历入参list中的数据，执行查询 -->
	<select id="getEmpsForeach" resultType="d_e">
		select id,last_name lastName,gender,email from tbl_employee
	    where id in 
		<!-- collection:指定要遍历的集合
			 list类型的参数会特殊处理封装在map中，map的key就叫list
			 item：将当前遍历出的元素赋值给指定的变量
			 seperator：每个元素之间的分隔符
			 open:遍历出的结果前加一个对应的字符
			 close：在瓶装字符串结尾加close指定的字符
			 index：索引。-->
		<foreach collection="ids" item="item_id" separator="," open="(" close=")" index="">
			#{item_id}
		</foreach>
	</select>
	
	<!-- 遍历入参list，批量保存对象
		mysql 支持 values(),(),() 这种语法
		或者使用完整sql语句使用foreach进行分号拼接
		（连接数据库参数需要开启这种功能），sql1;sql2;sql3 -->
	<insert id="addEmps">
		insert into tbl_employee(last_name,email,gender,d_id) 
  		values
  		<foreach collection="emps" separator="," item="e">
  			 (#{e.lastName},#{e.email},#{e.gender},#{e.dept.id})
  		</foreach>
	</insert>
	
	<!-- 两个内置参数
		不只是方法传递过来的参数可以被拿来判断，取值
			mybatis默认还有两个参数，
			_parameter：代表整个参数
			 	单个参数：_parameter就代表这个参数
			 	多个参数：参数会被封装为一个map；_parameter就是代表这个map
			 	
			 _databaseId:如果配置了databaseIdProvider标签。
			 	_databbaseId就是代表当前数据库的别名
			 	可用于对于不同的数据库执行不同的sql语句，即底层屏蔽数据库的差异
			 -->
	<select id="getEmpsTestInternalParamters" resultType="d_e">
		<!-- bind：可以将ognl表达式的值绑定到一个变量中，方便后来引用这个变量的值 -->
		<bind name="_lastName" value="'%'+lastName+'%'"/>
		<if test="_databaseId=='mysql'">
			select 
			<include refid="selectColumn"></include>   <!-- 引用封装的sql片段 -->
			from tbl_employee
			<!-- _parameter即入参Employee，用于判断这个参数是否为空 
				上面bind将lastName绑定成了%lastName%,并且重命名为_lastName-->
			<if test="_parameter!=null">
				where last_name like #{_lastName}
			</if>
		</if>
		<if test="_databaseId=='oracle'">
			select id,last_name lastName,gender,email from tbl_employee where id=#{id}
		</if>
	</select>
	
	<!-- 抽取可重用的sql片段，方便后面引用
		这里将要经常查询的列名抽取出来，后续可以直接引用这个id
		调用者只需使用include标签引用即可，
		sql中还可以定义使用变量（${..}），由include中定义 -->
	<sql id="selectColumn">
		id,last_name lastName,gender,email
	</sql>
</mapper>